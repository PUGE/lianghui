<template lang="pug">
.home
  //- 底部logo
  img.logo(src="@|logo.png|")
  //- img.left-logo(src="@|text.png|")
  //- img.silk.ani-float(src="@|silk.png|")
  video.bg-video(id="video-index" muted="true" loop="true" src="@|bg.mp4|" poster="@|bg.jpg|" style="width: 100%;")
  #WebGLCanvas
</template>

<script>
  module.exports = {
    data: {
      mouse: null,
      scene: null,
      renderer: null,
      WebGLCanvas: null,
      width: null,
      height: null,
      camera: null,
      camerapos: {},
      raycaster: null,
      light: null,
      controls: null,
      ecart: 0,
      isDrag: false,
      targetRotation: 0,
      stopTimer: true,
      // 允许点击的元素
      clickObjects: [],
      mockData: {
        "wishes": [{
          "name": "对外开放",
          number: 13123,
          distance: 0
        }, {
          "name": "精准扶贫",
          number: 13123,
          distance: 0.05
        }, {
          "name": "营商环境",
          number: 13123,
          distance: -5.5
        }, {
          "name": "社会保障",
          number: 13123,
          distance: 5
        }, {
          "name": "居民收入",
          number: 13123,
          distance: 18
        }, {
          "name": "就业创业",
          number: 13123,
          distance: -2
        }, {
          "name": "生态环保",
          number: 13123,
          distance: 0
        }, {
          "name": "农业农村",
          number: 432322,
          distance: 0.2
        }, {
          "name": "对外开放",
          number: 232133,
          distance: 0
        }, {
          "name": "经济金融",
          number: 23213,
          distance: -1
        }, {
          "name": "健康中国",
          number: 343234,
          distance: 2
        }, {
          "name": "群众办事",
          number: 231234,
          distance: 20
        }, {
          "name": "依法治国",
          number: 12357,
          distance: 2.4
        }, {
          "name": "乡村振兴",
          number: 542344,
          distance: -0.5
        }]
      }
    },
    created: function () {
      // 获取窗口比例
      if ((window.innerWidth / window.innerHeight) > (1920 / 1080)) {
        this.query('.bg-video').style.width = '100%'
        this.query('.bg-video').style.height = 'auto'
      } else {
        this.query('.bg-video').style.width = 'auto'
        this.query('.bg-video').style.height = '100%'
      }
      // 创建3D场景
      this.init()
      // 添加主标题文字
      this.addText()
      // 添加环绕的线
      this.addLine()
      // 添加圆球
      this.addMessage()
      // 增加两会logo
      this.addLogo()
      const animate = () => {
        requestAnimationFrame(animate)
        // this.data.controls.update()
        this.render()
      }
      this.query('video').play()
      animate()
      this.initThreeClickEvent()
    },
    init: function () {
      this.data.width = window.innerWidth
      this.data.height = window.innerHeight
      this.data.WebGLCanvas = document.getElementById("WebGLCanvas")
      this.data.mouse = new THREE.Vector2
      this.data.scene = new THREE.Scene
      this.data.renderer = new THREE.WebGLRenderer({
        antialias: true,
        alpha: true,
        precision: "highp"
      })
      this.data.renderer.setSize(this.data.width, this.data.height)
      this.data.renderer.sortObjects = true
      this.data.WebGLCanvas.appendChild(this.data.renderer.domElement)
      this.data.camera = new THREE.PerspectiveCamera(400, this.data.width / this.data.height, 1, 2000)
      this.data.camerapos.positionZ = this.data.camera.position.z = 20
      this.data.camerapos.positionY = this.data.camera.position.y = 6
      this.data.camerapos.positionX = 0
      this.data.group = new THREE.Group
      this.data.group2 = new THREE.Group
      this.data.group3 = new THREE.Group
      this.data.scene.add(this.data.group)
      this.data.scene.add(this.data.group2)
      // this.data.scene.add(this.data.group3)
      this.data.raycaster = new THREE.Raycaster
      this.data.camera.lookAt(this.data.scene.position)

      // 鼠标按住旋转事件
      this.data.isDrag = false
      let isPress = false
      this.data.WebGLCanvas.addEventListener("mousedown", () => {
        isPress = true
        this.data.isDrag = true
      }, false)
      this.data.WebGLCanvas.addEventListener("mouseup", () => {
        isPress = false
        setTimeout(() => {
          this.data.isDrag = false
        }, 600);
      }, false)
      this.data.WebGLCanvas.addEventListener("mousemove", (e) => {
        if (!this.data.isDrag || !isPress) return
        // console.log(e.movementX)
        this.data.group2.rotation.y += e.movementX * 0.01
      }, false)
    },
    addLogo: function () {
      const logoGroup1 = new THREE.Group
      this.data.scene.add(logoGroup1)
      const logoGroup2 = new THREE.Group
      this.data.scene.add(logoGroup2)
      

      // logo-1
      new THREE.TextureLoader().load("@|logo-1.png|", texture => {
        texture.minFilter = THREE.LinearFilter
        var textObj = new THREE.SpriteMaterial({
          map: texture,
          opacity: 0
        })
        var logo = new THREE.Sprite(textObj);
        logoGroup1.scale.set(4.7, 4.5, 1)

        logo.updateMatrix()
        logoGroup1.position.set(-2.8, 1, 0)
        logoGroup1.add(logo)

        TweenLite.to(textObj, 2, {
          opacity: 1,
          delay: 4.5
        })
        this.data.clickObjects.push(logo)
      })
      new THREE.TextureLoader().load("@|logo-2.png|", texture => {
        texture.minFilter = THREE.LinearFilter
        var textObj = new THREE.SpriteMaterial({
          map: texture,
          opacity: 0
        })
        var logo = new THREE.Sprite(textObj);
        logoGroup2.scale.set(4.7, 4.5, 1)

        logo.updateMatrix()
        logoGroup2.position.set(2.8, 1, 0)
        logoGroup2.add(logo)

        TweenLite.to(textObj, 2, {
          opacity: 1,
          delay: 4.5
        })
        this.data.clickObjects.push(logo)
      })
    },
    render: function () {
      this.data.ecart = -1 / 800
      this.data.isIntro || (this.data.group.rotation.y += this.data.ecart)
      if (!this.data.isDrag) {
        this.data.group2.rotation.y += .9 * this.data.ecart
      }
      
      // this.data.group2.rotation.y = 180 / 180 * Math.PI
      // this.data.group3.rotation.y += .9 * this.data.ecart
      const ro = (this.data.group2.rotation.y * 180 / Math.PI) % 360
      for (let index = 0; index < this.data.group2.children.length; index++) {
        const element = this.data.group2.children[index];
        const temp = index * (360 / 14) + ro
        if (temp < 80 && temp > -100) {
          element.visible = false
        } else {
          element.visible = true
        }
      }
      // this.data.camera.lookAt(this.data.scene.position);
      this.data.renderer.render(this.data.scene, this.data.camera);
    },
    addCircle: function(e) {
      // 分段个数
      let segment = e * 10
      let r = e, i = new THREE.Geometry, n = i.vertices, a = 2 * Math.PI / segment
      for (let o = 0; segment > o; o++) {
        const s = r * Math.cos(a * o)
        const h = r * Math.sin(a * o)
        n.push(new THREE.Vector3(s, h, 0))
      }
      // 闭合线段
      n.push(new THREE.Vector3(r * Math.cos(0), r * Math.sin(0), 0))
      // i.computeLineDistances();
      // 设置线的属性
      var l = new THREE.LineBasicMaterial({
        linewidth: 1,
        opacity: .15,
        transparent: true
      }),
      c = new THREE.Line(i, l);
      c.computeLineDistances()
      c.position.z = -3
      c.position.y = -1
      c.rotation.x = Math.PI / 2.0
      return c
    },
    addLine: function () {
      // 圆圈
      var o = this.addCircle(9.2);
      this.data.scene.add(o)
      TweenLite.to(o.scale, .7, {
        x: 1,
        y: 1,
        z: 1,
        ease: Back.easeOut,
        delay: .8
      });
      var s = this.addCircle(10.1);
      this.data.scene.add(s)

      // 圆圈
      TweenLite.to(s.scale, .7, {
        x: 1,
        y: 1,
        z: 1,
        ease: Back.easeOut,
        delay: .7
      });
      var l = this.addCircle(7);
      this.data.scene.add(l)
      
      TweenLite.to(l.scale, .7, {
        x: 1,
        y: 1,
        z: 1,
        ease: Back.easeOut,
        delay: .9
      })
    },
    addText: function() {
      const textGroup = new THREE.Group
      this.data.scene.add(textGroup)
      // 文字
      new THREE.TextureLoader().load("@|text.png|", texture => {
        texture.minFilter = THREE.LinearFilter
        
        var textObj = new THREE.SpriteMaterial({
          map: texture,
          opacity: 0
        })
        var a = new THREE.Sprite(textObj);
        a.scale.set(14.5, 5.8, 1)
        a.updateMatrix()
        a.position.x = 0.1
        a.position.y = 4
        textGroup.add(a);
        TweenLite.to(a.position, 0.5, {
          y: 0.1,
          delay: 1.2,
          ease: Elastic.easeOut.config(1, 0.9)
        })
        TweenLite.to(textObj, 1, {
          delay: 1,
          opacity: 1
        })
        // 4秒后让文字消失
        TweenLite.to(textObj, 1, {
          delay: 4,
          opacity: 0
        })
        TweenLite.to('.left-logo', 1, {
          delay: 5,
          opacity: 1
        })
      })
      // 文字的阴影
      new THREE.TextureLoader().load("@|text-sh.png|", texture => {
        texture.minFilter = THREE.LinearFilter
        
        var textObj = new THREE.SpriteMaterial({
          map: texture,
          opacity: 0
        })
        var a = new THREE.Sprite(textObj);
        a.scale.set(12, 2.6, 1)
        // a.rotation.copy(this.data.camera.rotation)
        a.translateY(-2)
        a.updateMatrix()
        a.position.y = -4
        textGroup.add(a);
        TweenLite.to(a.position, 0.5, {
          y: -2.5,
          delay: 1.2,
          ease: Elastic.easeOut.config(1, 0.9)
        })
        TweenLite.to(textObj, 0.3, {
          delay: 1,
          opacity: 1
        })
        // 4秒后让文字消失
        TweenLite.to(textObj, 1, {
          delay: 4,
          opacity: 0
        })
        // 6秒后消除场景
        setTimeout(() => {
          this.data.scene.remove(textGroup)
        }, 6000);
      })
      new THREE.TextureLoader().load("@|light.png|", spoture => {
        spoture.minFilter = THREE.LinearFilter
        this.addSpot(spoture, -5, 0, 0)
        this.addSpot(spoture, 5, -1, 0)
        this.addSpot(spoture, -3, -2, 2)
        this.addSpot(spoture, -2, 1.4, 1)
      })
    },
    addSpot: function (spoture, x, y, z) {
      var spotObj = new THREE.SpriteMaterial({
        map: spoture,
        opacity: 0
      })
      var spot = new THREE.Sprite(spotObj);
      spot.scale.set(2, 2, 1)
      spot.position.set(x, 0, z)
      spot.updateMatrix()
      this.data.group3.add(spot)
      new TweenMax(spotObj, 2, {
        opacity: 1,
        repeat: -1,
        yoyo: true
      })
      // 光球冲地面上升起
      TweenLite.to(spot.position, 10, {
        y: y,
        opacity: 1
      })
    },
    addMessage: function () {
      let ind = 0
      this.data.mockData.wishes.forEach(element => {
        this.addWishes(ind++, element.name, element.distance, element.number)
      })
    },
    creatText: function (text, config) {
      var n = config.hasOwnProperty("fontface") ? config.fontface: "Raleway"
      var a = config.hasOwnProperty("fontsize") ? config.fontsize: 50
      var o = config.hasOwnProperty("borderThickness") ? config.borderThickness: 4
      var canvasTemp = document.createElement("canvas");

      canvasTemp.width = 980
      canvasTemp.height = 180
      var u = canvasTemp.getContext("2d");
      u.font = a + "px " + n
      u.textBaseline = "top";
      u.strokeStyle = "#fcd681"
      u.lineWidth = o
      u.fillStyle = "#fcd681"
      // 文字 x y
      u.fillText(text, 550, 70)
      var d = new THREE.Texture(canvasTemp)
      d.minFilter = THREE.LinearFilter
      d.needsUpdate = true;
      return d
    },
    makeTextSprite: function (text, config = {}) {
      var f = new THREE.SpriteMaterial({
        map: this.creatText(text, config),
        opacity: 0
      })
      let E = new THREE.Sprite(f)
      E.scale.set(12, 2.5, 1);
      return E
    },
    addWishes: function (ind, text, distance, number) {
      var n = 2.5 * ind * .175 + Math.PI
      // 小图标
      const texture = new THREE.TextureLoader().load("@|blove.png|")
      texture.minFilter = THREE.LinearFilter
      let part = new THREE.Sprite(new THREE.SpriteMaterial({
        map: texture,
        opacity: 0.2,
        transparent: true,
        visible: false
      }))
      // 两秒后显示心
      setTimeout(() => {
        part.material.visible = true
      }, 2000);
      // console.log(part)
      part.scale.set(0.3, 0.3, 1);
      // part.position.x = 0,
      // part.position.y = 0,
      // part.position.z = 0;
      part.name = ind
      this.data.group2.add(part)
      // 信息
      var textTemp = this.makeTextSprite(text + ' ' + number, {});
      textTemp.name = ind
      this.data.clickObjects.push(textTemp)
      // u.position.y = -2
      part.add(textTemp)
      TweenLite.to(part.children[0].material, .6, {
        delay: .9 + .1 * ind,
        opacity: 1
      })
      TweenLite.to(part.position, .6, {
        x: 7.5 * Math.sin(n),
        y: -(ind / 20) + 0.5,
        z: (8.5 + distance) * Math.cos(n),
        ease: Back.easeOut,
        delay: .9 + .1 * ind
      })
      // 心的图标一闪一闪的
      setTimeout(() => {
        new TweenMax(part.material, 0.5, {
          opacity: 1,
          repeat: -1,
          yoyo: true
        })
      }, 2000 + Math.random() * 500);
    },
    // threejs点击事件
    initThreeClickEvent: function () {
      const renderer = this.data.renderer
      const camera = this.data.camera
      const _this = this
      //点击射线
      var raycaster = new THREE.Raycaster();
      var mouse = new THREE.Vector2();

      document.getElementById("WebGLCanvas").addEventListener('mousedown', onDocumentMouseDown, false);
      function onDocumentMouseDown(event) {
        event.preventDefault();
        mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;
        mouse.y = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1;

        raycaster.setFromCamera(mouse, camera);

        //总结一下，这里必须装网格，mesh，装入组是没有效果的
        //所以我们将所有的盒子的网格放入对象就可以了
        // 需要被监听的对象要存储在clickObjects中。
        var intersects = raycaster.intersectObjects(_this.data.clickObjects);

        // console.log(intersects)
        if (intersects.length > 0) {
          // 在这里填写点击代码
          // console.log("dianji");
          
          const wishes = _this.data.mockData.wishes[intersects[0].object.name]
          intersects[0].object.material.map = _this.creatText(wishes.name + ' ' + (++wishes.number), {})
          // 点击后心来个放大效果
          // new TweenMax(intersects[0].object.scale, 0.3, {
          //   x: 0.6,
          //   y: 0.6,
          //   repeat: 1,
          //   yoyo: true
          // })
          // showDetailPage(intersects[0].object.name);
        }
      }
    }
  }
</script>


<style lang="less">
.home {
  // background-image: url('@|bg.jpg|');
  background-size: cover;
  background-position: center;
  overflow: hidden;
}
.logo {
  position: absolute;
  left: 11%;
  /* right: 0; */
  top: 5%;
  width: 200px;
  margin: auto;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  pointer-events: none;
  z-index: 9;
}
.silk {
  position: absolute;
  width: 100%;
  height: auto;
  z-index: 0;
  right: 0;
  bottom: 0;
}
#WebGLCanvas {
  z-index: 4;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  margin: auto;
}
@keyframes float{
  0% {
    transform: scale(1.01) translateX(3px) translateY(-12px) rotateY(12deg) rotateX(12deg);
  }
  50% {
    transform: scale(1) translateX(0px) translateY(0) rotateY(0deg) rotateX(0deg);
  }
  100% {
    transform: scale(1.01) translateX(3px) translateY(-12px) rotateY(12deg) rotateX(12deg);
  }
}

.ani-float {
  transform-origin: 100% 50%;
  animation: float 6s infinite 0s linear;
}
.left-logo {
  position: absolute;
  width: 280px;
  left: 8%;
  top: 6%;
  opacity: 0;
}
.bg-video {
  width: 100%;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  margin: auto;
}
.home {
  background-image: url('@|bg.jpg|');
}
</style>
